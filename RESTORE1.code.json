{
  "files": {
    "src/services/supabaseService.ts": "import { supabase } from '../lib/supabase';\n\nexport const profileService = {\n  async getUserProfile(userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .maybeSingle();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      throw error;\n    }\n  },\n\n  async updateUserProfile(userId: string, profile: any) {\n    try {\n      // First check if profile exists\n      const existingProfile = await this.getUserProfile(userId);\n      \n      const { data, error } = await supabase\n        .from('user_profiles')\n        .upsert({\n          user_id: userId,\n          ...profile,\n          id: existingProfile?.id || undefined,\n          created_at: existingProfile?.created_at || new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n\n  async getPersonalityAnalysis(userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('personality_analysis')\n        .select('*')\n        .eq('user_id', userId)\n        .maybeSingle();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting personality analysis:', error);\n      throw error;\n    }\n  },\n\n  async savePersonalityAnalysis(userId: string, analysis: any) {\n    try {\n      // First check if analysis exists\n      const existingAnalysis = await this.getPersonalityAnalysis(userId);\n      \n      const { data, error } = await supabase\n        .from('personality_analysis')\n        .upsert({\n          user_id: userId,\n          ...analysis,\n          id: existingAnalysis?.id || undefined,\n          created_at: existingAnalysis?.created_at || new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error saving personality analysis:', error);\n      throw error;\n    }\n  },\n\n  async getAIPersona(userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('ai_personas')\n        .select('*')\n        .eq('user_id', userId)\n        .maybeSingle();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting AI persona:', error);\n      throw error;\n    }\n  },\n\n  async saveAIPersona(userId: string, persona: any) {\n    try {\n      // First check if persona exists\n      const existingPersona = await this.getAIPersona(userId);\n      \n      const { data, error } = await supabase\n        .from('ai_personas')\n        .upsert({\n          user_id: userId,\n          ...persona,\n          id: existingPersona?.id || undefined,\n          created_at: existingPersona?.created_at || new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error saving AI persona:', error);\n      throw error;\n    }\n  }\n};",
    "src/components/analysis/PersonalInfo.tsx": "import React from 'react';\n\ninterface Props {\n  data: any;\n  updateData: (data: any) => void;\n}\n\nconst PersonalInfo: React.FC<Props> = ({ data, updateData }) => {\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-semibold mb-6\">Personal Information</h2>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Full Name\n        </label>\n        <input\n          type=\"text\"\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n          value={data.fullname || ''}\n          onChange={(e) => updateData({ fullname: e.target.value })}\n          placeholder=\"Enter your full name\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Age\n          </label>\n          <input\n            type=\"number\"\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            value={data.age || ''}\n            onChange={(e) => updateData({ age: parseInt(e.target.value) || '' })}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Gender\n          </label>\n          <select\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            value={data.gender || ''}\n            onChange={(e) => updateData({ gender: e.target.value })}\n          >\n            <option value=\"\">Select gender</option>\n            <option value=\"male\">Male</option>\n            <option value=\"female\">Female</option>\n            <option value=\"non-binary\">Non-binary</option>\n            <option value=\"other\">Other</option>\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Location\n          </label>\n          <input\n            type=\"text\"\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            value={data.location || ''}\n            onChange={(e) => updateData({ location: e.target.value })}\n            placeholder=\"City, Country\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Occupation\n          </label>\n          <input\n            type=\"text\"\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            value={data.occupation || ''}\n            onChange={(e) => updateData({ occupation: e.target.value })}\n          />\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Relationship History\n        </label>\n        <select\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n          value={data.relationship_history || ''}\n          onChange={(e) => updateData({ relationship_history: e.target.value })}\n        >\n          <option value=\"\">Select status</option>\n          <option value=\"never-married\">Never Married</option>\n          <option value=\"divorced\">Divorced</option>\n          <option value=\"widowed\">Widowed</option>\n          <option value=\"separated\">Separated</option>\n        </select>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Lifestyle\n        </label>\n        <textarea\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n          rows={4}\n          value={data.lifestyle || ''}\n          onChange={(e) => updateData({ lifestyle: e.target.value })}\n          placeholder=\"Describe your lifestyle, daily routines, and interests...\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalInfo;",
    "src/pages/PersonalityAnalysis.tsx": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft, ArrowRight, Check } from 'lucide-react';\nimport PersonalInfo from '../components/analysis/PersonalInfo';\nimport Preferences from '../components/analysis/Preferences';\nimport PsychologicalProfile from '../components/analysis/PsychologicalProfile';\nimport RelationshipGoals from '../components/analysis/RelationshipGoals';\nimport BehavioralInsights from '../components/analysis/BehavioralInsights';\nimport Dealbreakers from '../components/analysis/Dealbreakers';\nimport ErrorAlert from '../components/ErrorAlert';\nimport { useAuth } from '../contexts/AuthContext';\nimport { profileService } from '../services/supabaseService';\n\nconst steps = [\n  { id: 1, name: 'Personal Information', key: 'personalInfo' },\n  { id: 2, name: 'Preferences', key: 'preferences' },\n  { id: 3, name: 'Psychological Profile', key: 'psychologicalProfile' },\n  { id: 4, name: 'Relationship Goals', key: 'relationshipGoals' },\n  { id: 5, name: 'Behavioral Insights', key: 'behavioralInsights' },\n  { id: 6, name: 'Dealbreakers', key: 'dealbreakers' }\n];\n\nconst PersonalityAnalysis = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    personalInfo: {},\n    preferences: {},\n    psychologicalProfile: {},\n    relationshipGoals: {},\n    behavioralInsights: {},\n    dealbreakers: {}\n  });\n\n  // Load existing data when component mounts\n  useEffect(() => {\n    const loadExistingData = async () => {\n      if (!user) return;\n\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Load user profile\n        const userProfile = await profileService.getUserProfile(user.id);\n        if (userProfile) {\n          setFormData(prev => ({\n            ...prev,\n            personalInfo: userProfile\n          }));\n        }\n\n        // Load personality analysis\n        const analysis = await profileService.getPersonalityAnalysis(user.id);\n        if (analysis) {\n          setFormData(prev => ({\n            ...prev,\n            preferences: analysis.preferences || {},\n            psychologicalProfile: analysis.psychological_profile || {},\n            relationshipGoals: analysis.relationship_goals || {},\n            behavioralInsights: analysis.behavioral_insights || {},\n            dealbreakers: analysis.dealbreakers || {}\n          }));\n        }\n      } catch (err: any) {\n        console.error('Error loading data:', err);\n        setError('Failed to load your profile data. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadExistingData();\n  }, [user]);\n\n  const validateCurrentSection = () => {\n    const currentSection = steps[currentStep - 1];\n    const sectionData = formData[currentSection.key as keyof typeof formData];\n    \n    if (!sectionData || Object.keys(sectionData).length === 0) {\n      setError(`Please complete all fields in ${currentSection.name}`);\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    if (validateCurrentSection()) {\n      setError(null);\n      setCurrentStep(currentStep + 1);\n      window.scrollTo(0, 0);\n    }\n  };\n\n  const handlePrevious = () => {\n    setError(null);\n    setCurrentStep(currentStep - 1);\n    window.scrollTo(0, 0);\n  };\n\n  const handleSubmit = async () => {\n    if (!user) {\n      setError('You must be logged in to submit your profile');\n      return;\n    }\n\n    try {\n      setError(null);\n      setIsSubmitting(true);\n\n      // Validate current section\n      if (!validateCurrentSection()) {\n        return;\n      }\n\n      // Validate all sections\n      for (const step of steps) {\n        const sectionData = formData[step.key as keyof typeof formData];\n        if (!sectionData || Object.keys(sectionData).length === 0) {\n          throw new Error(`Please complete ${step.name} section before submitting`);\n        }\n      }\n\n      // Update user profile first\n      await profileService.updateUserProfile(user.id, {\n        ...formData.personalInfo,\n        updated_at: new Date().toISOString()\n      });\n\n      // Save personality analysis\n      await profileService.savePersonalityAnalysis(user.id, {\n        preferences: formData.preferences,\n        psychological_profile: formData.psychologicalProfile,\n        relationship_goals: formData.relationshipGoals,\n        behavioral_insights: formData.behavioralInsights,\n        dealbreakers: formData.dealbreakers,\n        updated_at: new Date().toISOString()\n      });\n\n      // Generate and save AI persona\n      await profileService.saveAIPersona(user.id, {\n        personality_type: 'analyzing...',\n        compatibility_factors: {},\n        relationship_style: 'analyzing...',\n        communication_style: 'analyzing...',\n        emotional_patterns: {},\n        core_values: {},\n        ai_insights: 'Analyzing your profile...',\n        matching_preferences: {},\n        updated_at: new Date().toISOString()\n      });\n\n      navigate('/smart-matching');\n    } catch (error: any) {\n      console.error('Submission error:', error);\n      setError(error.message || 'Error saving profile. Please try again.');\n      window.scrollTo(0, 0);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const updateFormData = (section: string, data: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: { ...prev[section], ...data }\n    }));\n    setError(null);\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return <PersonalInfo data={formData.personalInfo} updateData={(data) => updateFormData('personalInfo', data)} />;\n      case 2:\n        return <Preferences data={formData.preferences} updateData={(data) => updateFormData('preferences', data)} />;\n      case 3:\n        return <PsychologicalProfile data={formData.psychologicalProfile} updateData={(data) => updateFormData('psychologicalProfile', data)} />;\n      case 4:\n        return <RelationshipGoals data={formData.relationshipGoals} updateData={(data) => updateFormData('relationshipGoals', data)} />;\n      case 5:\n        return <BehavioralInsights data={formData.behavioralInsights} updateData={(data) => updateFormData('behavioralInsights', data)} />;\n      case 6:\n        return <Dealbreakers data={formData.dealbreakers} updateData={(data) => updateFormData('dealbreakers', data)} />;\n      default:\n        return null;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Personality Analysis</h1>\n        <p className=\"text-gray-600\">Complete this comprehensive assessment to find your perfect match</p>\n      </div>\n\n      {error && <ErrorAlert message={error} onClose={() => setError(null)} />}\n\n      {/* Progress Steps */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {steps.map((step) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  step.id < currentStep\n                    ? 'bg-green-500 text-white'\n                    : step.id === currentStep\n                    ? 'bg-indigo-600 text-white'\n                    : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                {step.id < currentStep ? (\n                  <Check className=\"w-5 h-5\" />\n                ) : (\n                  step.id\n                )}\n              </div>\n              {step.id !== steps.length && (\n                <div\n                  className={`h-1 w-12 md:w-24 ${\n                    step.id < currentStep ? 'bg-green-500' : 'bg-gray-200'\n                  }`}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n        <div className=\"flex justify-between text-sm text-gray-600\">\n          {steps.map((step) => (\n            <div key={step.id} className=\"w-24 text-center\">\n              {step.name}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className=\"bg-white rounded-xl shadow-lg p-6 mb-8\">\n        {renderStep()}\n      </div>\n\n      {/* Navigation Buttons */}\n      <div className=\"flex justify-between\">\n        <button\n          onClick={handlePrevious}\n          disabled={currentStep === 1}\n          className={`flex items-center px-6 py-3 rounded-lg ${\n            currentStep === 1\n              ? 'bg-gray-200 text-gray-400 cursor-not-allowed'\n              : 'bg-gray-600 text-white hover:bg-gray-700'\n          }`}\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2\" />\n          Previous\n        </button>\n        \n        {currentStep === steps.length ? (\n          <button\n            onClick={handleSubmit}\n            disabled={isSubmitting}\n            className=\"flex items-center px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-indigo-400\"\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit'}\n            <Check className=\"w-5 h-5 ml-2\" />\n          </button>\n        ) : (\n          <button\n            onClick={handleNext}\n            className=\"flex items-center px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700\"\n          >\n            Next\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalityAnalysis;"
  }
} 